//first number is column, second number is row
const int rgb11 = ?; //corresponds to button11
const int rgb13 = ?; //corresponds to button13
const int rgb15 = ?; //corresponds to button15
const int rgb17 = ?; //corresponds to button17
const int rgb22 = ?; //corresponds to button22
const int rgb24 = ?; //corresponds to button24
const int rgb26 = ?; //corresponds to button26
const int rgb28 = ?; //corresponds to button28
const int rgb31 = ?; //corresponds to button31
const int rgb33 = ?; //corresponds to button33
const int rgb35 = ?; //corresponds to button35
const int rgb37 = ?; //corresponds to button37
const int rgb42 = ?; //corresponds to button42
const int rgb44 = ?; //corresponds to button44
const int rgb46 = ?; //corresponds to button46
const int rgb48 = ?; //corresponds to button48
const int rgb51 = ?; //corresponds to button51
const int rgb53 = ?; //corresponds to button53
const int rgb55 = ?; //corresponds to button55  
const int rgb57 = ?; //corresponds to button57
const int rgb62 = ?; //corresponds to button62
const int rgb64 = ?; //corresponds to button64
const int rgb66 = ?; //corresponds to button66
const int rgb68 = ?; //corresponds to button68
const int rgb71 = ?; //corresponds to button71
const int rgb73 = ?; //corresponds to button73
const int rgb75 = ?; //corresponds to button75
const int rgb77 = ?; //corresponds to button77
const int rgb82 = ?; //corresponds to button82
const int rgb84 = ?; //corresponds to button84
const int rgb86 = ?; //corresponds to button86
const int rgb88 = ?; //corresponds to button88

//first number is column, second number is row
const int button11 = ?; //corresponds to button11
const int button13 = ?; //corresponds to button13
const int button15 = ?; //corresponds to button15
const int button17 = ?; //corresponds to button17
const int button22 = ?; //corresponds to button22
const int button24 = ?; //corresponds to button24
const int button26 = ?; //corresponds to button26
const int button28 = ?; //corresponds to button28
const int button31 = ?; //corresponds to button31
const int button33 = ?; //corresponds to button33
const int button35 = ?; //corresponds to button35
const int button37 = ?; //corresponds to button37
const int button42 = ?; //corresponds to button42
const int button44 = ?; //corresponds to button44
const int button46 = ?; //corresponds to button46
const int button48 = ?; //corresponds to button48
const int button51 = ?; //corresponds to button51
const int button53 = ?; //corresponds to button53
const int button55 = ?; //corresponds to button55
const int button57 = ?; //corresponds to button57
const int button62 = ?; //corresponds to button62 
const int button64 = ?; //corresponds to button64
const int button66 = ?; //corresponds to button66
const int button68 = ?; //corresponds to button68
const int button71 = ?; //corresponds to button71
const int button73 = ?; //corresponds to button73
const int button75 = ?; //corresponds to button75
const int button77 = ?; //corresponds to button77
const int button82 = ?; //corresponds to button82
const int button84 = ?; //corresponds to button84
const int button86 = ?; //corresponds to button86
const int button88 = ?; //corresponds to button88


//first number is column, second number is row
int buttonState11 = 0; //corresponds to button11
int buttonState13 = 0; //corresponds to button13
int buttonState15 = 0; //corresponds to button15  
int buttonState17 = 0; //corresponds to button17
int buttonState22 = 0; //corresponds to button22
int buttonState24 = 0; //corresponds to button24
int buttonState26 = 0; //corresponds to button26
int buttonState28 = 0; //corresponds to button28
int buttonState31 = 0; //corresponds to button31
int buttonState33 = 0; //corresponds to button33
int buttonState35 = 0; //corresponds to button35
int buttonState37 = 0; //corresponds to button37
int buttonState42 = 0; //corresponds to button42
int buttonState44 = 0; //corresponds to button44
int buttonState46 = 0; //corresponds to button46
int buttonState48 = 0; //corresponds to button48
int buttonState51 = 0; //corresponds to button51
int buttonState53 = 0; //corresponds to button53
int buttonState55 = 0; //corresponds to button55
int buttonState57 = 0; //corresponds to button57
int buttonState62 = 0; //corresponds to button62
int buttonState64 = 0; //corresponds to button64
int buttonState66 = 0; //corresponds to button66
int buttonState68 = 0; //corresponds to button68
int buttonState71 = 0; //corresponds to button71
int buttonState73 = 0; //corresponds to button73
int buttonState75 = 0; //corresponds to button75
int buttonState77 = 0; //corresponds to button77
int buttonState82 = 0; //corresponds to button82
int buttonState84 = 0; //corresponds to button84
int buttonState86 = 0; //corresponds to button86
int buttonState88 = 0; //corresponds to button88

//colors
int redValue = 0;
int greenvalue = 0;
int bluevalue = 0;

//pos1 is first peice clicked
//pos2 is place you want to put peice
int pos1;
int pos2;

//2d array of 8 by 8 for board 
int array board {{1,2,3,4,5,6,7,8},{1,2,3,4,5,6,7,8}};

//bool turn, if true player1 turn if false player2 turn
bool turn = true;
//bool peice test for if a piece exists there
//bool player test for player1 or 2
//bool king test for king

class player1(){
  blueValue = 255;
}

class player2(){
  redvalue = 255;
  greenvlue = 255;
}

class king(){
  if(player)
  //player 2 is orange
}

#define COMMON_ANODE

void setup() {
  //player one pieces
  digitalWrite(rgb11, HIGH);
  digitalWrite(rgb13, HIGH);
  digitalWrite(rgb15, HIGH);
  digitalWrite(rgb17, HIGH);
  digitalWrite(rgb22, HIGH);
  digitalWrite(rgb24, HIGH);
  digitalWrite(rgb26, HIGH);
  digitalWrite(rgb28, HIGH);
  digitalWrite(rgb31, HIGH);
  digitalWrite(rgb33, HIGH);
  digitalWrite(rgb35, HIGH);
  digitalWrite(rgb37, HIGH);
  //player two pieces
  digitalWrite(rgb62, HIGH);
  digitalWrite(rgb64, HIGH);
  digitalWrite(rgb66, HIGH);
  digitalWrite(rgb68, HIGH);
  digitalWrite(rgb71, HIGH);
  digitalWrite(rgb73, HIGH);
  digitalWrite(rgb75, HIGH);
  digitalWrite(rgb77, HIGH);
  digitalWrite(rgb82, HIGH);
  digitalWrite(rgb84, HIGH);
  digitalWrite(rgb86, HIGH);
  digitalWrite(rgb88, HIGH);
  //led lights
  pinMode(rgb, OUTPUT);
  //Buttons
  pinMode(button, INPUT);
  //position
  pinMode(pos1, INPUT); //first button clicked on players turn
  pinMode(pos2, INPUT); //second button clicked on players turn
}

void loop() {
  //start of game
  start();
  
  buttonState11 = digitalRead(button11);//what does this do?
  if (buttonState11 == HIGH ) {
    digitalWrite(rgb11, HIGH);//turn that light on
  }
  if (buttonState13 == HIGH) {
    digitalWrite(rgb13, HIGH);
  }
  if (buttonState15 == HIGH ) {
    digitalWrite(rgb15, HIGH);
  }
  if (buttonState17 == HIGH ) {
    digitalWrite(rgb17, HIGH);
  }
  
  //game logic
  if(turn = true){
    //player1 turn
    //pos1 = greenvalue = 255
    if(pos2 = pos1){
     //pos1 turn back to player color
      //reset pos1 to next click
    }
    else if(pos2 = /*another checker peice exists on this space*/){
      //flash red for 1 sec
      //reset to highlight pos1 green
    }
    else{
      if(pos2 = /*1 square away from pos1 && forwards*/){
        //flash green then place peice go to player color
        //turn++
      }
      else if(pos2 = /*2 away and player 2 peice is between*/){
        //flash green then place peice
        //opposing piece flashes red then disapears
        if(/*player 2 peice is adjecent to pos2*/){
          //stay green
        }
        else{
          //go to player color
          //player turn++
        }
      }
      else{
        //flash red for 1 sec
        //reset to highlight pos1 green
      }
    }
    turn = false;
  }
  else{
    //player2 turn
    //pos1 = greenValue = 255
    if(pos2 = pos1){
     //pos1 turn back to player color
      //reset pos1 to next click
    }
    else if(pos2 = /*another checker peice exists on this space*/){
      //flash red for 1 sec
      //reset to highlight pos1 green
    }
    else{
      if(pos2 = /*1 square away from pos1 && forwards*/){
        //flash green then place peice go to player color
        //turn++
      }
      else if(pos2 = /*2 away and player 2 peice is between*/){
        //flash green then place peice
        //opposing piece flashes red then disapears
        if(/*player 2 peice is adjecent to pos2*/){
          //stay green
        }
        else{
          //go to player color
          //player turn++
        }
      }
      else{
        //flash red for 1 sec
        //reset to highlight pos1 green
      }
    }
    turn = true;
  }
}
